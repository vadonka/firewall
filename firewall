#!/bin/bash
# Hardened advanced firewall script
# written by vadonka
# No copyright, feel free to evolve :)
# v2.0.2
# 2016.02.29.

if [[ $1 == "stop" ]]; then
	stop="1"
	start="0"
else
	stop="0"
	start="1"
fi

if [ ! -f /usr/local/etc/firewall.conf ]; then
echo -en "Config file doesn't exsist!\nCreating default config..."
cat > /usr/local/etc/firewall.conf << EOF
### Change this to yes or comment out after setup
configured=no
#
### iptables binary
IPT="/sbin/iptables"
#
### Interfaces
PUB_IF="eth0"   # public interface
LO_IF="lo"      # loopback
#
### Trusted networks, separated with space
#TRUSTED_NET="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
#
### Trusted users, separated with space
#TRUSTED_USERS="root"
#
### Country/IP only accept, separated with space
##  GeoIP two letter country code or IP/MASK
#   example: "HU 123.123.123.123/26 CN US"
#   use "any" for unlimited access
#   if not defined means block all access!
#
#ICMP_IN=""					# ICMP inbound rules
#DNS_IN=""					# DNS inbound rules
#FTP_IN=""					# FTP inbound rules
#FTP_PORT="21"				# FTP server port, default: 21
#FTP_PASV="50000:60000"		# FTP passive port range
#SSH_IN=""					# SSH inbound rules
#SSH_PORT="22"				# SSH server port, default: 22
#SSH_OUT=""					# SSH outbound rules
#ISPCONF_IN=""				# ISPconfig inbound rules for ports 8080,8081
#SMTP_IN=""					# SMTP inbound rules for ports 25,465,587
#SMTP_OUT=""				# SMTP outbound rules for ports 25,465,587
#POPI_IN=""					# POP3/IMAP inbound rules for ports 110,143,993,995
#POPI_OUT=""				# POP3/IMAP outbound rules for ports 110,143,993,995
#HTTP_IN=""					# HTTP inbound rules for port 80
#HTTPS_IN=""				# HTTPS inbound rules for port 443
#HTTP_OUT=""				# HTTP outbound rules for port 80
#HTTPS_OUT=""				# HTTPS outbound rules for port 443
#
### Custom input/output rules
# syntax "rule:direction:country/ip:username:proto:port"
# rule: "allow" or "deny" (cannot be empty!)
# direction: "in" or "out" (cannot be empty!)
# country/ip: GeoIP two letter country code like US,CN,HU or IP/MASK (or leave empty)
# username: system username (or leave empty)
# proto: "tcp" or "udp" (or leave empty)
# port: 1-65535 (or leave empty)
# empty parameter need to preserve the separate colon!
#
# multiple rules write to a new row (one rule/row)
# example, allow tcp 1234 input port from US "allow:in:US::tcp:1234"
#
# important note: user match can only be use in out direction,
# it will be ignored in any input rules!
# Custom rules added right after the base rules,
# so it will be override any predefined rules above!
#
#CUSTOM_RULES="
#allow:in:US::tcp:1234
#allow:out:123.123.123.123/26:user1:tcp:8000
#"

EOF

echo -e "Done.\n\nPlease setup the configuration file in /usr/local/etc/firewall.conf"
exit 1
fi

source /usr/local/etc/firewall.conf

if [[ ${configured} == "no" ]]; then
	echo "Please setup the configuration file first!"
	exit 1
fi

#### IPS ######
LOCAL_IP=$(ip addr show ${PUB_IF} | grep 'inet ' | awk -F ' ' '{print $2}' | awk -F '/' '{print $1}')

### Start firewall ###
startproc()
{
echo -n "(Re)starting $(hostname) Firewall..."

### Detect WEB Server
webhttp="0"; webhttps="0"
if (: < /dev/tcp/${LOCAL_IP}/80) 2>/dev/null
then
	echo -n "HTTP..."
	webhttp="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/443) 2>/dev/null
then
	echo -n "HTTPS..."
	webhttps="1"
fi

### Detect ISPConfig
ispconfig="0"
if [ -e /usr/local/ispconfig ]; then
	ispport1="0"; ispport2="0"
	if (: < /dev/tcp/${LOCAL_IP}/8080) 2>/dev/null
	then
		ispport1="1"
	fi
	if (: < /dev/tcp/${LOCAL_IP}/8081) 2>/dev/null
	then
		ispport2="1"
	fi
	if [[ ${ispport1} == "1" ]] && [[ ${ispport2} == "1" ]]; then
		echo -n "ISPConfig..."
		ispconfig="1"
	fi
fi

### Detect Fail2Ban
fbrestart="0"
if [ -e /etc/fail2ban/fail2ban.conf ]; then
	config_detect=$(grep -e "pidfile.*.pid" /etc/fail2ban/fail2ban.conf)
	pidfile_start=$(echo ${config_detect} | grep -aob '/var' | awk -F ':' '{print $1}')
	pidfile=$(echo ${config_detect} | cut -b${pidfile_start}-)
	if [ -e ${pidfile} ]; then
	f2b_pid=$(cat ${pidfile})
		if ps -p ${f2b_pid} > /dev/null; then
			echo -n "Fail2Ban..."
			fbrestart="1"
		fi
	fi
fi

### Detect FTP
if [[ -z ${FTP_PORT} ]]; then
	if (: < /dev/tcp/${LOCAL_IP}/21) 2>/dev/null
	then
		FTP_PORT="21"
		echo -n "FTP..."
	fi
else
	if (: < /dev/tcp/${LOCAL_IP}/${FTP_PORT}) 2>/dev/null
	then
		echo -n "FTP..."
	else
		FTP_PORT=""
	fi
fi

### Detect DNS Server
dns="0"
if (: < /dev/tcp/${LOCAL_IP}/53) 2>/dev/null
then
	echo -n "DNS..."
	dns="1"
fi

### Detect SMTP Server
smtp25="0"; smtp465="0"; smtp587="0"
if (: < /dev/tcp/${LOCAL_IP}/25) 2>/dev/null
then
	echo -n "SMTP..."
	smtp25="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/465) 2>/dev/null
then
	echo -n "SMTPS..."
	smtp465="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/587) 2>/dev/null
then
	echo -n "SUBMISSION..."
	smtp587="1"
fi

# Detect POP/IMAP Servers
pop110="0"; pop995="0"; imap143="0"; imap993="0"
if (: < /dev/tcp/${LOCAL_IP}/110) 2>/dev/null
then
	echo -n "POP3..."
	pop110="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/995) 2>/dev/null
then
	echo -n "POP3S..."
	pop995="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/143) 2>/dev/null
then
	echo -n "IMAP..."
	imap143="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/993) 2>/dev/null
then
	echo -n "IMAPS..."
	imap993="1"
fi

# Detect SSH
if [[ -z ${SSH_PORT} ]]; then
	if (: < /dev/tcp/${LOCAL_IP}/22) 2>/dev/null
	then
		SSH_PORT="22"
		echo -n "SSHD..."
	fi
else
	if (: < /dev/tcp/${LOCAL_IP}/${SSH_PORT}) 2>/dev/null
	then
		echo -n "SSHD..."
	else
		SSH_PORT=""
	fi
fi

# DROP and close everything 
${IPT} -F
${IPT} -X
${IPT} -t nat -F
${IPT} -t nat -X
${IPT} -t mangle -F
${IPT} -t mangle -X
${IPT} -P INPUT DROP
${IPT} -P OUTPUT DROP
${IPT} -P FORWARD DROP

# Unlimited lo access
${IPT} -A INPUT -i ${LO_IF} -j ACCEPT
${IPT} -A OUTPUT -o ${LO_IF} -j ACCEPT

# Drop sync
${IPT} -A INPUT -i ${PUB_IF} -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Drop Fragments
${IPT} -A INPUT -i ${PUB_IF} -f -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL ALL -j DROP

# Drop NULL packets
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] NULL Packets "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Drop XMAS
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] XMAS Packets "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

# Drop FIN packet scans
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Fin Packets Scan "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Log and get rid of broadcast / multicast and invalid 
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Broadcast "
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -j DROP

${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Multicast "
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -j DROP

${IPT} -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Invalid "
${IPT} -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -j DROP

# Custom input/output rules
if [[ ! -z ${CUSTOM_RULES} ]]; then
	error="0"
	echo -n "Custom input/output user rules..."
	for cust in ${CUSTOM_RULES}
	do
		rule=$(echo ${cust} | awk -F ':' '{print $1}')
		direction=$(echo ${cust} | awk -F ':' '{print $2}')
		cntorip=$(echo ${cust} | awk -F ':' '{print $3}')
		user=$(echo ${cust} | awk -F ':' '{print $4}')
		proto=$(echo ${cust} | awk -F ':' '{print $5}')
		port=$(echo ${cust} | awk -F ':' '{print $6}')
		if [[ ${rule} == "allow" ]]; then rule="ACCEPT"; elif [[ ${rule} == "deny" ]]; then rule="DROP"; else error="1"; fi
		if [[ ${direction} == "in" ]]; then direction="INPUT"; elif [[ ${direction} == "out" ]]; then direction="OUTPUT"; else error="1"; fi
		if [[ ! -z ${cntorip} ]]; then
			check=$(echo ${cntorip} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				if [[ ${direction} == "INPUT" ]]; then
					cntoriprule="-m geoip --src-cc ${cntorip}"
				elif [[ ${direction} == "OUTPUT" ]]; then
					cntoriprule="-m geoip --dst-cc ${cntorip}"
				fi
			else
				if [[ ${direction} == "INPUT" ]]; then
					cntoriprule="--src ${cntorip}"
				elif [[ ${direction} == "OUTPUT" ]]; then
					cntoriprule="--dst ${cntorip}"
				fi
			fi
		else
			cntoriprule=""
		fi
		if [[ ! -z ${user} ]] && [[ ${direction} == "OUTPUT" ]]; then
			userrule="-m owner --uid-owner ${user}"
		else
			userrule=""
		fi

		if [[ ${proto} == "tcp" ]]; then proto="-p tcp -m tcp"; pr="tcp"; elif [[ ${proto} == "udp" ]]; then proto="-p udp -m udp"; pr="udp"; else proto=""; fi

		if [[ ! -z ${proto} ]]; then
			if [[ ${port} -ge "1" ]] && [[ ${port} -le "65535" ]]; then port=${port}; else port=""; fi
		else
			if [[ ! -z ${port} ]]; then error="1"; fi
		fi
		if [[ ${error} == "0" ]]; then 
			if [[ ${direction} == "INPUT" ]]; then
				${IPT} -A INPUT -i ${PUB_IF} ${proto} ${cntoriprule} ${userrule} $(if [[ ! -z ${port} ]]; then echo "--sport 1024:65535 --dport ${port}"; fi) -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] CUSTIN ${pr}:${port}:${rule}"
				${IPT} -A INPUT -i ${PUB_IF} ${proto} ${cntoriprule} ${userrule} $(if [[ ! -z ${port} ]]; then echo "--sport 1024:65535 --dport ${port}"; fi) -m conntrack --ctstate NEW,ESTABLISHED -j ${rule}
				if [[ ${rule} == "ACCEPT" ]]; then
					${IPT} -A OUTPUT -o ${PUB_IF} ${proto} $(if [[ ! -z ${port} ]]; then echo "--sport ${port} --dport 1024:65535"; fi) -m conntrack --ctstate ESTABLISHED -j ACCEPT
				fi
			elif [[ ${direction} == "OUTPUT" ]]; then
				${IPT} -A OUTPUT -o ${PUB_IF} ${proto} ${cntoriprule} ${userrule} $(if [[ ! -z ${port} ]]; then echo "--dport ${port}"; fi) -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] CUSTOUT ${pr}:${port}:${rule}"
				${IPT} -A OUTPUT -o ${PUB_IF} ${proto} ${cntoriprule} ${userrule} $(if [[ ! -z ${port} ]]; then echo "--dport ${port}"; fi) -m conntrack --ctstate NEW,ESTABLISHED -j ${rule}
				if [[ ${rule} == "ACCEPT" ]]; then
					${IPT} -A INPUT -i ${PUB_IF} ${proto} $(if [[ ! -z ${port} ]]; then echo "--sport ${port}"; fi) -m conntrack --ctstate ESTABLISHED -j ACCEPT
				fi
			fi
		else
			echo -n "Misconfigured rules: ${cust}..."
		fi
	done
fi

# Allow communication from selected trusted networks/ips
if [[ -z ${TRUSTED_NET} ]]; then TRUSTED_NET="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"; fi
for ip in ${TRUSTED_NET}
do
	${IPT} -A INPUT -i ${PUB_IF} -s ${ip} -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -d ${ip} -j ACCEPT
done

# allow incoming sync/ack packets
${IPT} -A INPUT -p tcp -m tcp --sport 0:1023 ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# allow trusted users unlimited outbound
if [[ -z ${TRUSTED_USERS} ]]; then TRUSTED_USERS="root"; fi
for usr in ${TRUSTED_USERS}
do
	${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -j ACCEPT
done

if [[ ${ispconfig} == "1" ]]; then
	${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ispconfig -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ispapps -j ACCEPT
fi

# allow incoming ICMP ping pong stuff
icmpin()
{
	${IPT} -A INPUT -i ${PUB_IF} -p icmp ${icmpsrc} --icmp-type 8 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -m limit --limit 30/sec  -j ACCEPT
}

icmpinack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p icmp --icmp-type 0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
}

if [[ ! -z ${ICMP_IN} ]]; then
	if [[ ${ICMP_IN} == "any" ]]; then
		icmpsrc="-s 0/0"; icmpin; icmpinack;
	else
		for i in ${ICMP_IN}
		do
			check=$(echo ${i} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				icmpsrc="-m geoip --src-cc ${i}"
			else
				icmpsrc="-s ${i}"
			fi
			icmpin;
		done
		icmpinack;
	fi
fi

# SSH in/out
sshin()
{
	if [[ ! -z ${SSH_PORT} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${sshsrc} --sport 1024:65535 --dport ${SSH_PORT} -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] SSH IN "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${sshsrc} --sport 1024:65535 --dport ${SSH_PORT} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
}

sshinack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport ${SSH_PORT} --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

sshout()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp ${sshdst} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SSH OUT "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp ${sshdst} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

sshoutack()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

if [[ ! -z ${SSH_PORT} ]]; then
	if [[ ! -z ${SSH_IN} ]]; then
		if [[ ${SSH_IN} == "any" ]]; then
			sshsrc="-s 0/0"; sshin; sshinack;
		else
			for s in ${SSH_IN}
			do
				check=$(echo ${s} | grep [^[:alpha:]])
				if [[ -z ${check} ]]; then
					sshsrc="-m geoip --src-cc ${s}"
				else
					sshsrc="-s ${s}"
				fi
				sshin;
			done
			sshinack;
		fi
	fi
fi

if [[ ! -z ${SSH_OUT} ]]; then
	if [[ ${SSH_OUT} == "any" ]]; then
		sshdst="-d 0/0"; sshout; sshoutack;
	else
		for s in ${SSH_OUT}
		do
			check=$(echo ${s} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				sshdst="-m geoip --dst-cc ${s}"
			else
				sshdst="-d ${s}"
			fi
			sshout;
		done
		sshoutack;
	fi
fi

# allow incoming HTTP(S) port 80,443
httpin()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${httpsrc} --sport 1024:65535 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 80 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

httpinack()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 80 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

httpsin()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${httpssrc} --sport 1024:65535 --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 443 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

httpsinack()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 443 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

if [[ ${webhttp} == "1" ]]; then
	if [[ ! -z ${HTTP_IN} ]]; then
		if [[ ${HTTP_IN} == "any" ]]; then
			httpsrc="-s 0/0"; httpin; httpinack;
		else
			for h in ${HTTP_IN}
			do
				check=$(echo ${h} | grep [^[:alpha:]])
				if [[ -z ${check} ]]; then
					httpsrc="-m geoip --src-cc ${h}"
				else
					httpsrc="-s ${h}"
				fi
				httpin;
			done
			httpinack;
		fi
	fi
fi

if [[ ${webhttps} == "1" ]]; then
	if [[ ! -z ${HTTPS_IN} ]]; then
		if [[ ${HTTPS_IN} == "any" ]]; then
			httpssrc="-s 0/0"; httpsin; httpsinack;
		else
			for h in ${HTTPS_IN}
			do
				check=$(echo ${h} | grep [^[:alpha:]])
				if [[ -z ${check} ]]; then
					httpssrc="-m geoip --src-cc ${h}"
				else
					httpssrc="-s ${h}"
				fi
				httpsin;
			done
			httpsinack;
		fi
	fi
fi

# allow incoming ISPCONFIG HTTP(S) port 8080,8081
ispconfin()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${ispconfsrc} --sport 1024:65535 --match multiport --dports 8080,8081 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

ispconfinack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --match multiport --sports 8080,8081 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

if [[ ${ispconfig} == "1" ]]; then
	if [[ ! -z ${ISPCONF_IN} ]]; then
		if [[ ${ISPCONF_IN} == "any" ]]; then
			ispconfsrc="-s 0/0"; ispconfin; ispconfinack;
		else
			for i in ${ISPCONF_IN}
			do
				check=$(echo ${i} | grep [^[:alpha:]])
				if [[ -z ${check} ]]; then
					ispconfsrc="-m geoip --src-cc ${i}"
				else
					ispconfsrc="-s ${i}"
				fi
				ispconfin;
			done
			ispconfinack;
		fi
	fi
fi

# allow incoming FTP
ftpin()
{
	if [[ -z ${FTP_PASV} ]]; then FTP_PASV="1024:65535"; fi
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${ftpsrc} --sport 1024:65535 --dport ${FTP_PORT} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${ftpsrc} --sport 1024:65535 --dport ${FTP_PASV} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

ftpinack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport ${FTP_PORT} --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport ${FTP_PASV} --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

if [[ ! -z ${FTP_PORT} ]]; then
	if [[ ! -z ${FTP_IN} ]]; then
		if [[ ${FTP_IN} == "any" ]]; then
			ftpsrc="-s 0/0"; ftpin; ftpinack;
		else
			for f in ${FTP_IN}
			do
				check=$(echo ${f} | grep [^[:alpha:]])
				if [[ -z ${check} ]]; then
					ftpsrc="-m geoip --src-cc ${f}"
				else
					ftpsrc="-s ${f}"
				fi
				ftpin;
			done
			ftpinack;
		fi
	fi
fi

# allow incoming DNS
dnsin()
{
	${IPT} -A INPUT -i ${PUB_IF} -p udp -m udp ${dnsinsrc} --sport 1024:65535 --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${dnsinsrc} --sport 1024:65535 --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

dnsinack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

if [[ ${dns} == "1" ]]; then
	if [[ ! -z ${DNS_IN} ]]; then
		if [[ ${DNS_IN} == "any" ]]; then
			dnsinsrc="-s 0/0"; dnsin; dnsinack;
		else
			for d in ${FTP_IN}
			do
				check=$(echo ${d} | grep [^[:alpha:]])
				if [[ -z ${check} ]]; then
					dnsinsrc="-m geoip --src-cc ${d}"
				else
					dnsinsrc="-s ${d}"
				fi
				dnsin;
			done
			dnsinack;
		fi
	fi
fi

# allow outgoing DNS
${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p udp -m udp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing NTP
${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p udp -m udp --sport 123 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing HTTP,SMTP and LOG
httpout()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp ${httpoutdst} --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] HTTP OUT "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp ${httpoutdst} --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}
httpsout()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp ${httpsoutdst} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] HTTPS OUT "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp ${httpsoutdst} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

if [[ ! -z ${HTTP_OUT} ]]; then
	if [[ ${HTTP_OUT} == "any" ]]; then
		httpoutdst="-d 0/0"; httpout;
	else
		for h in ${HTTP_OUT}
		do
			check=$(echo ${h} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				httpoutdst="-m geoip --dst-cc ${h}"
			else
				httpoutdst="-d ${h}"
			fi
			httpout;
		done
	fi
fi

if [[ ! -z ${HTTPS_OUT} ]]; then
	if [[ ${HTTPS_OUT} == "any" ]]; then
		httpsoutdst="-d 0/0"; httpsout;
	else
		for h in ${HTTPS_OUT}
		do
			check=$(echo ${h} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				httpsoutdst="-m geoip --dst-cc ${h}"
			else
				httpsoutdst="-d ${h}"
			fi
			httpsout;
		done
	fi
fi

# SMTP IN/OUT, POP3/IMAP IN OUT
smtpin()
{
	if [[ ${smtp25} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${smtpsrc} --sport 1024:65535 --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] SMTP IN 25 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${smtpsrc} --sport 1024:65535 --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ${smtp465} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${smtpsrc} --sport 1024:65535 --dport 465 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] SMTP IN 465 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${smtpsrc} --sport 1024:65535 --dport 465 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ${smtp587} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${smtpsrc} --sport 1024:65535 --dport 587 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] SMTP IN 587 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${smtpsrc} --sport 1024:65535 --dport 587 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
}

smtpinack()
{
	if [[ ${smtp25} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 25 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	if [[ ${smtp465} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 465 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	if [[ ${smtp587} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 587 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
}

smtpout()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 ${smtpdst} --match multiport --dports 25,465,587 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SMTP OUT "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 ${smtpdst} --match multiport --dports 25,465,587 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

smtpoutack()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --match multiport --sports 25,465,587 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

popin()
{
	if [[ ${pop110} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 110 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] POP3 IN 110 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 110 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ${pop995} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 995 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] POP3 IN 995 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 995 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ${imap143} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 143 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] IMAP IN 143 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 143 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ${imap993} == "1" ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 993 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] POP3 IN 993 "
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp ${popisrc} --sport 1024:65535 --dport 993 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
}

popinack()
{
	if [[ ${pop110} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 110 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	if [[ ${pop995} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 995 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	if [[ ${imap143} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 143 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	if [[ ${imap993} == "1" ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 993 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
}

popout()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 ${popidst} --match multiport --dports 110,143,993,995 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] POP/IMAP OUT "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 ${popidst} --match multiport --dports 110,143,993,995 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

popoutack()
{
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --match multiport --sports 110,143,993,995 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
}

# SMTP IN
if [[ ! -z ${SMTP_IN} ]]; then
	if [[ ${SMTP_IN} == "any" ]]; then
		smtpsrc="-s 0/0"; smtpin; smtpinack;
	else
		for s in ${SMTP_IN}
		do
			check=$(echo ${s} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				smtpsrc="-m geoip --src-cc ${s}"
			else
				smtpsrc="-s ${s}"
			fi
			smtpin;
		done
        smtpinack;
	fi
fi

# SMTP OUT
if [[ ! -z ${SMTP_OUT} ]]; then
	if [[ ${SMTP_OUT} == "any" ]]; then
		smtpdst="-d 0/0"; smtpout; smtpoutack;
	else
		for s in ${SMTP_OUT}
		do
			check=$(echo ${s} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				smtpdst="-m geoip --dst-cc ${s}"
			else
				smtpdst="-d ${s}"
			fi
			smtpout;
		done
		smtpoutack;
	fi
fi

# POP/IMAP IN
if [[ ! -z ${POPI_IN} ]]; then
	if [[ ${POPI_IN} == "any" ]]; then
		popisrc="-s 0/0"; popin; popinack;
	else
		for s in ${POPI_IN}
		do
			check=$(echo ${s} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				popisrc="-m geoip --src-cc ${s}"
			else
				popisrc="-s ${s}"
			fi
			popin;
		done
		popinack;
	fi
fi

# POP/IMAP OUT
if [[ ! -z ${POPI_OUT} ]]; then
	if [[ ${POPI_OUT} == "any" ]]; then
		popidst="-d 0/0"; popout; popoutack;
	else
		for s in ${POPI_OUT}
		do
			check=$(echo ${s} | grep [^[:alpha:]])
			if [[ -z ${check} ]]; then
				popidst="-m geoip --dst-cc ${s}"
			else
				popidst="-d ${s}"
			fi
			popout;
		done
		popoutack;
	fi
fi

#######################
# drop and log everything else
${IPT} -A INPUT -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] DEFAULT DROP "
${IPT} -A INPUT -j DROP

# Restart Fail2Ban if needed
if [[ ${fbrestart} == "1" ]]; then
	if [[ -e /etc/init.d/fail2ban ]]; then
		/etc/init.d/fail2ban restart > /dev/null 2>&1
	else
		checksystemd=$(find /etc/systemd/ -name "*fail2ban*")
		if [[ ! -z ${checksystemd} ]]; then systemctl restart fail2ban.service; fi
	fi
fi

echo "Done."
}

stopproc()
{
echo -n "Stopping $(hostname) Firewall..."
${IPT} -F
${IPT} -X
${IPT} -t nat -F
${IPT} -t nat -X
${IPT} -t mangle -F
${IPT} -t mangle -X
${IPT} -P INPUT ACCEPT
${IPT} -P OUTPUT ACCEPT
${IPT} -P FORWARD ACCEPT
echo "Done."
}

if [[ ${start} == "1" ]] && [[ ${stop} == "0" ]]; then
	startproc;
elif [[ ${start} == "0" ]] && [[ ${stop} == "1" ]]; then
	stopproc;
fi

exit 0
