#!/bin/bash

if [ ! -f /usr/local/etc/firewall.conf ]; then
echo -en "Config file doesn't exsist!\nCreating default config..."
cat > /usr/local/etc/firewall.conf << EOF
### Change this to yes or comment out after setup
configured=no

### iptables binary
IPT="/sbin/iptables"

### Interfaces
PUB_IF="eth0"   # public interface
LO_IF="lo"      # loopback

### Trusted networks, separated with space
TRUSTED_NET="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

### Trusted users, separated with space
TRUSTED_USERS="root"

### Default ALL ispconfig (if installed) WEB USER will be trusted except whos listed in untrusted, separated with space
UNTRUST_ISPUSER=""

### FTP Passive port range
FTP_PASV="50000:60000"

### Country only accept, separated with comma, leave empty for unlimited access
# IMCP allow only from
ICMP_ACK=""
# FTP allow only from
FTP_ACK=""
# SSH allow only from
SSH_ACK=""
# ISPConfig webapps and ispapps (tcp 8080,8081) allow only from
ISPCONF_ACK=""
# HTTP(S) port allow only from
HTTP_ACK=""
HTTPS_ACK=""

### SMTP send allow only this address
SMTP_HOST="127.0.0.1"

EOF

echo -e "Done.\n\nPlease setup the configuration file in /usr/local/etc/firewall.conf"
exit 1
fi

source /usr/local/etc/firewall.conf

if [[ ${configured} == "no" ]]; then
	echo "Please setup the configuration file first!"
fi

#### IPS ######
LOCAL_IP=$(ip addr show ${PUB_IF} | grep 'inet ' | awk -F ' ' '{print $2}' | awk -F '/' '{print $1}')

### Start firewall ###
echo "Setting $(hostname) Firewall..."

### Detect WEB Server
echo -n "WEB..."
webhttp="0"
webhttps="0"

if (: < /dev/tcp/${LOCAL_IP}/80) 2>/dev/null
then
	echo -n "HTTP..."
	webhttp="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/443) 2>/dev/null
then
	echo -n "HTTPS..."
	webhttps="1"
fi
if [[ ${webhttp} == "0" ]] && [[ ${webhttps} == "0" ]]; then
	echo "no web port open."
else
	echo "is open."
fi

### Detect ISPConfig
echo -n "ISPConfig..."
ispconfig="0"
if [ -e /usr/local/ispconfig ]; then
	ispport1="0"
	ispport2="0"
	if (: < /dev/tcp/${LOCAL_IP}/8080) 2>/dev/null
	then
		ispport1="1"
	fi
	if (: < /dev/tcp/${LOCAL_IP}/8081) 2>/dev/null
	then
		ispport2="1"
	fi
	if [[ ${ispport1} == "1" ]] && [[ ${ispport2} == "1" ]]; then
		echo "detected and default ports are open."
		ispconfig="1"
	else
		echo "detected but defaults port are not open, check ispconfig web configuration."
	fi
else
	echo "not detected."
fi

### Detect Fail2Ban
echo -n "Fail2Ban..."
fbrestart="0"
if [ -e /etc/fail2ban/fail2ban.conf ]; then
	config_detect=$(grep -e "pidfile.*.pid" /etc/fail2ban/fail2ban.conf)
	pidfile_start=$(echo ${config_detect} | grep -aob '/var' | awk -F ':' '{print $1}')
	pidfile=$(echo ${config_detect} | cut -b${pidfile_start}-)
	if [ -e ${pidfile} ]; then
	f2b_pid=$(cat ${pidfile})
	if ps -p ${f2b_pid} > /dev/null; then
		echo "detected and running."
		fbrestart="1"
	else
		echo "detected but not running."
	fi
	else
	echo "detected but not running."
	fi
else
	echo "not detected."
fi

### Detect FTP
echo -n "FTP..."
ftp="0"
if (: < /dev/tcp/${LOCAL_IP}/21) 2>/dev/null
then
	echo "detected."
	ftp="1"
else
	echo "not detected."
fi

### Detect DNS Server
echo -n "DNS..."
dns="0"
if (: < /dev/tcp/${LOCAL_IP}/53) 2>/dev/null
then
	echo "detected."
	dns="1"
else
	echo "not detected."
fi

# DROP and close everything 
${IPT} -F
${IPT} -X
${IPT} -t nat -F
${IPT} -t nat -X
${IPT} -t mangle -F
${IPT} -t mangle -X
${IPT} -P INPUT DROP
${IPT} -P OUTPUT DROP
${IPT} -P FORWARD DROP

# Unlimited lo access
${IPT} -A INPUT -i ${LO_IF} -j ACCEPT
${IPT} -A OUTPUT -o ${LO_IF} -j ACCEPT

# Drop sync
${IPT} -A INPUT -i ${PUB_IF} -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Drop Fragments
${IPT} -A INPUT -i ${PUB_IF} -f -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL ALL -j DROP

# Drop NULL packets
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] NULL Packets "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Drop XMAS
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] XMAS Packets "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

# Drop FIN packet scans
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Fin Packets Scan "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Log and get rid of broadcast / multicast and invalid 
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -j LOG --log-prefix "[FW] Broadcast "
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -j DROP

${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -j LOG --log-prefix "[FW] Multicast "
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -j DROP

${IPT} -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -j LOG --log-prefix "[FW] Invalid "
${IPT} -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -j DROP

# Allow communication from selected trusted networks/ips
for ip in ${TRUSTED_NET}
do
	${IPT} -A INPUT -i ${PUB_IF} -s ${ip} -d ${LOCAL_IP} -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -d ${ip} -s ${LOCAL_IP} -j ACCEPT
done

# allow incoming sync/ack packets
${IPT} -A INPUT -p tcp -m tcp --sport 0:1023 ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# allow incoming ICMP ping pong stuff
if [[ -z ${ICMP_ACK} ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p icmp --icmp-type 8 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -m limit --limit 30/sec  -j ACCEPT
else
	${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ICMP_ACK} -p icmp --icmp-type 8 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -m limit --limit 30/sec  -j ACCEPT
fi
${IPT} -A OUTPUT -o ${PUB_IF} -p icmp --icmp-type 0 -d 0/0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# allow incoming SSH
if [[ -z ${SSH_ACK} ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
else
	${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${SSH_ACK} -p tcp --sport 1024:65535 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
fi
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 22 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow incoming HTTP(S) port 80,443
if [[ ${webhttp} == "1" ]]; then
	if [[ -z ${HTTP_ACK} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -s 0/0 --sport 1024:65535 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 80 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${HTTP_ACK} -p tcp --sport 1024:65535 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -m geoip --dst-src ${HTTP_ACK} -p tcp --sport 80 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
fi
if [[ ${webhttps} == "1" ]]; then
	if [[ -z ${HTTPS_ACK} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -s 0/0 --sport 1024:65535 --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 443 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${HTTP_ACK} -p tcp --sport 1024:65535 --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -m geoip --dst-src ${HTTP_ACK} -p tcp --sport 443 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
fi

# allow incoming ISPCONFIG HTTP(S) port 8080,8081
if [[ ${ispconfig} == "1" ]]; then
	if [[ -z ${ISPCONF_ACK} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport 8081 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ISPCONF_ACK} -p tcp --sport 1024:65535 --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ISPCONF_ACK} -p tcp --sport 1024:65535 --dport 8081 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 8080 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 8081 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

# allow incoming FTP
if [[ ${ftp} == "1" ]]; then
	if [[ -z ${FTP_ACK} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport 20 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${FTP_ACK} -p tcp --sport 1024:65535 --dport 20 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${FTP_ACK} -p tcp --sport 1024:65535 --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ! -z ${FTP_PASV} ]]; then
		if [[ -z ${FTP_ACK} ]]; then
			${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport ${FTP_PASV} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		else
			${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${FTP_ACK} -p tcp --sport 1024:65535 --dport ${FTP_PASV} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		fi
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport ${FTP_PASV} -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 20 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 21 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

# allow incoming DNS
if [[ ${dns} == "1" ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p tcp --sport 1024:65535 --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A INPUT -i ${PUB_IF} -s 0/0 -p udp --sport 1024:65535 --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --sport 53 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p udp --sport 53 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

# allow outgoing DNS and LOG
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] DNS TCP"
${IPT} -A OUTPUT -o ${PUB_IF} -p udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] DNS UDP"
${IPT} -A OUTPUT -o ${PUB_IF} -p udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p udp --sport 53 -m conntrack --ctstate ESTABLISHED -j ACCEPT
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp --sport 53 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing NTP and LOG
${IPT} -A OUTPUT -o ${PUB_IF} -p udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] NTP "
${IPT} -A OUTPUT -o ${PUB_IF} -p udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p udp --sport 123 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing SSH and LOG
if [[ -z ${SSH_ACK} ]]; then
	${IPT} -A OUTPUT -o ${PUB_IF} -d 0/0 -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] SSH "
	${IPT} -A OUTPUT -o ${PUB_IF} -d 0/0 -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
else
	${IPT} -A OUTPUT -o ${PUB_IF} -m geoip --dst-cc ${SSH_ACK} -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] SSH "
	${IPT} -A OUTPUT -o ${PUB_IF} -m geoip --dst-cc ${SSH_ACK} -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
fi
${IPT} -A INPUT -i ${PUB_IF} -p tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing HTTP,SMTP and LOG for all ispconfig user except untrusted
if [[ ${ispconfig} == "1" ]]; then
	if [[ -z ${UNTRUST_ISPUSER} ]]; then
		${IPT} -A OUTPUT -o ${PUB_IF} -s 0/0 -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] HTTP "
		${IPT} -A OUTPUT -o ${PUB_IF} -s 0/0 -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] HTTPS "
		${IPT} -A OUTPUT -o ${PUB_IF} -s 0/0 -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -s 0/0 -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -s 0/0 -d ${SMTP_HOST} -p tcp --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] SMTP "
		${IPT} -A OUTPUT -o ${PUB_IF} -s 0/0 -d ${SMTP_HOST} -p tcp --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	else
		grep ^web /etc/passwd | awk -F ':' '{print $1}' > /tmp/allusr
		echo ${UNTRUST_ISPUSER} | tr ' ' '\n' > /tmp/untusr

		TRUSTED_WEB_USERS=$(diff -c /tmp/allusr /tmp/untusr | egrep -e "^- |^! " | cut -b3- | tr '\n' ' ')

		for usr in ${TRUSTED_WEB_USERS}
			do
			${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] HTTP "
			${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] HTTPS "
			${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
			${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
			${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -d ${SMTP_HOST} -p tcp --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] SMTP "
			${IPT} -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -d ${SMTP_HOST} -p tcp --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		done

		rm -rf /tmp/allusr > /dev/null 2>&1
		rm -rf /tmp/untusr > /dev/null 2>&1
	fi
fi

${IPT} -A INPUT -i ${PUB_IF} -p tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp --sport 25 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow trusted users unlimited outbound
for usr in ${TRUSTED_USERS}
do
        #${IPT} -I OUTPUT -o ${PUB_IF} -j LOG --log-uid --log-prefix "[FW] ${usr} " --- disabled because too much logging spoof
        ${IPT} -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -j ACCEPT
done

if [[ ${ispconfig} == "1" ]]; then
	${IPT} -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ispconfig -j ACCEPT
	${IPT} -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ispapps -j ACCEPT
fi

### add your other rules here ####

#######################
# drop and log everything else
${IPT} -A INPUT -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] DEFAULT DROP "
${IPT} -A INPUT -j DROP

# Restart Fail2Ban if needed
if [[ ${fbrestart} == "1" ]]; then
    /etc/init.d/fail2ban restart
fi

exit 0

