#!/bin/bash

IPT="/sbin/iptables"

#### IPS ######
LOCAL_IP=$(ifconfig eth0 | grep 'inet addr:' | awk -F'inet addr:' '{ print $2}' | awk '{ print $1}')
TRUSTED_NET="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
TRUSTED_USERS="root ispconfig ispapps"

# Default ALL WEB USER will be trusted except whos listed in untrusted
UNTRUSTED_WEB_USERS=""

ICMP_ACK="HU"
FTP_ACK="HU"
SSH_ACK="HU"
ISPCONF_ACK="HU"
SMTP_HOST=""

### Interfaces ###
PUB_IF="eth0"   # public interface
LO_IF="lo"      # loopback

### start firewall ###
echo "Setting $(hostname) Firewall..."

# DROP and close everything 
$IPT -F
$IPT -X
$IPT -t nat -F
$IPT -t nat -X
$IPT -t mangle -F
$IPT -t mangle -X
$IPT -P INPUT DROP
$IPT -P OUTPUT DROP
$IPT -P FORWARD DROP

# Unlimited lo access
$IPT -A INPUT -i ${LO_IF} -j ACCEPT
$IPT -A OUTPUT -o ${LO_IF} -j ACCEPT

# Drop sync
$IPT -A INPUT -i ${PUB_IF} -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Drop Fragments
$IPT -A INPUT -i ${PUB_IF} -f -j DROP

$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL ALL -j DROP

# Drop NULL packets
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] NULL Packets "
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -j DROP

$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Drop XMAS
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] XMAS Packets "
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

# Drop FIN packet scans
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Fin Packets Scan "
$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -j DROP

$IPT  -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Log and get rid of broadcast / multicast and invalid 
$IPT  -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -j LOG --log-prefix "[FW] Broadcast "
$IPT  -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -j DROP

$IPT  -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -j LOG --log-prefix "[FW] Multicast "
$IPT  -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -j DROP

$IPT  -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -j LOG --log-prefix "[FW] Invalid "
$IPT  -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -j DROP

# Allow communication from selected trusted networks/ips
for ip in ${TRUSTED_NET}
do
        $IPT -A INPUT -i ${PUB_IF} -s ${ip} -d ${LOCAL_IP} -j ACCEPT
        $IPT -A OUTPUT -o ${PUB_IF} -d ${ip} -s ${LOCAL_IP} -j ACCEPT
done

# allow incoming sync/ack packets
$IPT -A INPUT -p tcp -m tcp --sport 0:1023 ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# allow incoming ICMP ping pong stuff
$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ICMP_ACK} -p icmp --icmp-type 8 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -m limit --limit 30/sec  -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p icmp --icmp-type 0 -d 0/0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# allow incoming SSH
$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${SSH_ACK} -p tcp --sport 1024:65535 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 22 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow incoming HTTP(S) port 80,443
$IPT -A INPUT -i ${PUB_IF} -p tcp -s 0/0 --sport 1024:65535 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 80 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p tcp -s 0/0 --sport 1024:65535 --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 443 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow incoming ISPCONFIG HTTP(S) port 8080,8081
$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ISPCONF_ACK} -p tcp --sport 1024:65535 --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ISPCONF_ACK} -p tcp --sport 1024:65535 --dport 8081 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 8080 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 8081 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow incoming FTP
$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${FTP_ACK} -p tcp --sport 1024:65535 --dport 20 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 20 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${FTP_ACK} -p tcp --sport 1024:65535 --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 21 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

$IPT -A INPUT -i ${PUB_IF} -m geoip --src-cc ${FTP_ACK} -p tcp --sport 1024:65535 --dport 50000:60000 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --sport 50000:60000 -d 0/0 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing DNS and LOG
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] DNS TCP"
$IPT -A OUTPUT -o ${PUB_IF} -p udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] DNS UDP"
$IPT -A OUTPUT -o ${PUB_IF} -p udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p udp --sport 53 -m conntrack --ctstate ESTABLISHED -j ACCEPT
$IPT -A OUTPUT -o ${PUB_IF} -p tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p tcp --sport 53 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing NTP and LOG
$IPT -A OUTPUT -o ${PUB_IF} -p udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] NTP "
$IPT -A OUTPUT -o ${PUB_IF} -p udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p udp --sport 123 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing SSH and LOG
$IPT -A OUTPUT -o ${PUB_IF} -m geoip --dst-cc ${SSH_ACK} -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] SSH "
$IPT -A OUTPUT -o ${PUB_IF} -m geoip --dst-cc ${SSH_ACK} -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing HTTP,SMTP and LOG for all user except untrusted
grep ^web /etc/passwd | awk -F ':' '{print $1}' > /tmp/allusr
echo $UNTRUSTED_WEB_USERS | tr ' ' '\n' > /tmp/untusr

TRUSTED_WEB_USERS=$(diff -c /tmp/allusr /tmp/untusr | egrep -e "^- |^! " | cut -b3- | tr '\n' ' ')

for usr in ${TRUSTED_WEB_USERS}
do
    $IPT -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] HTTP "
    $IPT -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] HTTPS "
    $IPT -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
    $IPT -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
    $IPT -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -d ${SMTP_HOST} -p tcp --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j LOG --log-uid --log-prefix "[FW] SMTP "
    $IPT -A OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -d ${SMTP_HOST} -p tcp --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
done

$IPT -A INPUT -i ${PUB_IF} -p tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT
$IPT -A INPUT -i ${PUB_IF} -p tcp --sport 25 -m conntrack --ctstate ESTABLISHED -j ACCEPT

rm -rf /tmp/allusr > /dev/null 2>&1
rm -rf /tmp/untusr > /dev/null 2>&1

# allow trusted users unlimited outbound
for usr in ${TRUSTED_USERS}
do
        #$IPT -I OUTPUT -o ${PUB_IF} -j LOG --log-uid --log-prefix "[FW] ${usr} "
        $IPT -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -j ACCEPT
done

### add your other rules here ####

#######################
# drop and log everything else
$IPT -A INPUT -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] DEFAULT DROP "
$IPT -A INPUT -j DROP

# Restart fail2ban if detected and running
config_detect=$(grep -e "pidfile.*.pid" /etc/fail2ban/fail2ban.conf)
pidfile_start=$(echo $config_detect | grep -aob '/var' | awk -F ':' '{print $1}')
f2b_pid=$(cat $(echo $config_detect | cut -b$pidfile_start-))

if ps -p $f2b_pid > /dev/null
then
    echo "Fail2Ban detected and its running, restarting now!"
    /etc/init.d/fail2ban restart
fi

exit 0

