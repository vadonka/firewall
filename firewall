#!/bin/bash

if [[ $1 == "stop" ]]; then
	stop="1"
	start="0"
else
	stop="0"
	start="1"
fi

if [ ! -f /usr/local/etc/firewall.conf ]; then
echo -en "Config file doesn't exsist!\nCreating default config..."
cat > /usr/local/etc/firewall.conf << EOF
### Change this to yes or comment out after setup
configured=no

### iptables binary
IPT="/sbin/iptables"

### Interfaces
PUB_IF="eth0"   # public interface
LO_IF="lo"      # loopback

### Trusted networks, separated with space
TRUSTED_NET="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

### Trusted users, separated with space
TRUSTED_USERS="root"

### Default ALL ispconfig (if installed) WEB USER will be trusted except whos listed in untrusted, separated with space
UNTRUST_ISPUSER=""

### FTP Passive port range
FTP_PASV="50000:60000"

### Country only accept, separated with comma, leave empty for unlimited access
# IMCP allow only from
ICMP_IN=""
# FTP allow only from
FTP_IN=""
# SSH allow only from
SSH_IN=""
## SSH outbound allow to custom IP, separated with space
SSH_OUT_IP=""
# ISPConfig webapps and ispapps (tcp 8080,8081) allow only from
ISPCONF_IN=""
# HTTP(S) port allow only from/to
HTTP_IN=""
HTTPS_IN=""
HTTP_OUT=""
HTTPS_OUT=""

### SMTP send allow only this address, separated with space
SMTP_OUT="127.0.0.1"

### Custom input/output rules
# syntax "rule:direction:country:username:proto:port"
# rule: allow or deny (cannot be empty!)
# direction: in or out (cannot be empty!)
# country: short GeoIP country code like US,CN,HU (or leave empty)
# username: system username (or leave empty)
# proto: tcp or udp (or leave empty)
# port: 1-65535 (or leave empty)
#
# multip rule separated by space
# example, allow tcp 1234 input port from US "allow:in:US::tcp:1234"
CUSTOM_RULES=""

EOF

echo -e "Done.\n\nPlease setup the configuration file in /usr/local/etc/firewall.conf"
exit 1
fi

source /usr/local/etc/firewall.conf

if [[ ${configured} == "no" ]]; then
	echo "Please setup the configuration file first!"
	exit 1
fi

#### IPS ######
LOCAL_IP=$(ip addr show ${PUB_IF} | grep 'inet ' | awk -F ' ' '{print $2}' | awk -F '/' '{print $1}')

### Start firewall ###
startproc()
{
echo -n "(Re)starting $(hostname) Firewall..."

### Detect WEB Server
webhttp="0"
webhttps="0"

if (: < /dev/tcp/${LOCAL_IP}/80) 2>/dev/null
then
	echo -n "HTTP..."
	webhttp="1"
fi
if (: < /dev/tcp/${LOCAL_IP}/443) 2>/dev/null
then
	echo -n "HTTPS..."
	webhttps="1"
fi

### Detect ISPConfig
ispconfig="0"
if [ -e /usr/local/ispconfig ]; then
	ispport1="0"
	ispport2="0"
	if (: < /dev/tcp/${LOCAL_IP}/8080) 2>/dev/null
	then
		ispport1="1"
	fi
	if (: < /dev/tcp/${LOCAL_IP}/8081) 2>/dev/null
	then
		ispport2="1"
	fi
	if [[ ${ispport1} == "1" ]] && [[ ${ispport2} == "1" ]]; then
		echo -n "ISPConfig..."
		ispconfig="1"
	fi
fi

### Detect Fail2Ban
fbrestart="0"
if [ -e /etc/fail2ban/fail2ban.conf ]; then
	config_detect=$(grep -e "pidfile.*.pid" /etc/fail2ban/fail2ban.conf)
	pidfile_start=$(echo ${config_detect} | grep -aob '/var' | awk -F ':' '{print $1}')
	pidfile=$(echo ${config_detect} | cut -b${pidfile_start}-)
	if [ -e ${pidfile} ]; then
	f2b_pid=$(cat ${pidfile})
		if ps -p ${f2b_pid} > /dev/null; then
			echo -n "Fail2Ban..."
			fbrestart="1"
		fi
	fi
fi

### Detect FTP
ftp="0"
if (: < /dev/tcp/${LOCAL_IP}/21) 2>/dev/null
then
	echo -n "FTP..."
	ftp="1"
fi

### Detect DNS Server
dns="0"
if (: < /dev/tcp/${LOCAL_IP}/53) 2>/dev/null
then
	echo -n "DNS..."
	dns="1"
fi

### Detect SMTP Server
smtp="0"
if (: < /dev/tcp/${LOCAL_IP}/25) 2>/dev/null
then
	echo -n "SMTP..."
	smtp="1"
fi

# DROP and close everything 
${IPT} -F
${IPT} -X
${IPT} -t nat -F
${IPT} -t nat -X
${IPT} -t mangle -F
${IPT} -t mangle -X
${IPT} -P INPUT DROP
${IPT} -P OUTPUT DROP
${IPT} -P FORWARD DROP

# Unlimited lo access
${IPT} -A INPUT -i ${LO_IF} -j ACCEPT
${IPT} -A OUTPUT -o ${LO_IF} -j ACCEPT

# Drop sync
${IPT} -A INPUT -i ${PUB_IF} -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Drop Fragments
${IPT} -A INPUT -i ${PUB_IF} -f -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL ALL -j DROP

# Drop NULL packets
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] NULL Packets "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL NONE -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Drop XMAS
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] XMAS Packets "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

# Drop FIN packet scans
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Fin Packets Scan "
${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags FIN,ACK FIN -j DROP

${IPT} -A INPUT -i ${PUB_IF} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Log and get rid of broadcast / multicast and invalid 
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Broadcast "
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type broadcast -j DROP

${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Multicast "
${IPT} -A INPUT -i ${PUB_IF} -m pkttype --pkt-type multicast -j DROP

${IPT} -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix "[FW] Invalid "
${IPT} -A INPUT -i ${PUB_IF} -m conntrack --ctstate INVALID -j DROP

# Custom input/output rules
if [[ ! -z ${CUSTOM_RULES} ]]; then
	echo -n "Custom input/output user rules..."
	for cust in ${CUSTOM_RULES}
	do
		rule=$(echo ${cust} | awk -F ':' '{print $1}')
		direction=$(echo ${cust} | awk -F ':' '{print $2}')
		country=$(echo ${cust} | awk -F ':' '{print $3}')
		user=$(echo ${cust} | awk -F ':' '{print $4}')
		proto=$(echo ${cust} | awk -F ':' '{print $5}')
		port=$(echo ${cust} | awk -F ':' '{print $6}')
		if [[ ${rule} == "allow" ]]; then rule="ACCEPT"; elif [[ ${rule} == "deny" ]]; then rule="DROP"; else rule="unset"; fi
		if [[ ${direction} == "in" ]]; then direction="INPUT"; elif [[ ${direction} == "out" ]]; then direction="OUTPUT"; else direction="unset"; fi
		if [[ ! -z ${country} ]]; then
			if [[ ${direction} == "INPUT" ]]; then
				countryrule="-m geoip --src-cc ${country}"
			elif [[ ${direction} == "OUTPUT" ]]; then
				countryrule="-m geoip --dst-cc ${country}"
			fi
		else
			countryrule=""
		fi
		if [[ ! -z ${user} ]]; then
			userrule="-m owner --uid-owner ${user}"
		else
			userrule=""
		fi
		if [[ ${proto} == "tcp" ]] || [[ ${proto} == "udp" ]]; then proto=${proto}; else proto="unset"; fi
		if [[ ${port} -ge "1" ]] && [[ ${port} -le "65535" ]]; then port=${port}; else port="unset"; fi
		if [[ ${rule} != "unset" ]] && [[ ${direction} != "unset" ]] && [[ ${proto} != "unset" ]] && [[ ${port} != "unset" ]]; then 
			if [[ ${direction} == "INPUT" ]]; then
				${IPT} -A INPUT -i ${PUB_IF} -p ${proto} -m ${proto} ${countryrule} ${userrule} --sport 1024:65535 --dport ${port} -m conntrack --ctstate NEW,ESTABLISHED -j ${rule}
				${IPT} -A OUTPUT -o ${PUB_IF} -p ${proto} -m ${proto} --sport ${port} --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ${rule}
			elif [[ ${direction} == "OUTPUT" ]]; then
				${IPT} -A OUTPUT -o ${PUB_IF} -p ${proto} -m ${proto} ${countryrule} ${userrule} --dport ${port} -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] ${user}:${proto}:${port}:${country}:${rule}"
				${IPT} -A OUTPUT -o ${PUB_IF} -p ${proto} -m ${proto} ${countryrule} ${userrule} --dport ${port} -m conntrack --ctstate NEW,ESTABLISHED -j ${rule}
				${IPT} -A INPUT -i ${PUB_IF} -p ${proto} -m ${proto} --sport ${port} -m conntrack --ctstate ESTABLISHED -j ${rule}
			fi
		fi
	done
fi

# Allow communication from selected trusted networks/ips
for ip in ${TRUSTED_NET}
do
	${IPT} -A INPUT -i ${PUB_IF} -s ${ip} -d ${LOCAL_IP} -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -d ${ip} -s ${LOCAL_IP} -j ACCEPT
done

# allow incoming sync/ack packets
${IPT} -A INPUT -p tcp -m tcp --sport 0:1023 ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# allow incoming ICMP ping pong stuff
if [[ -z ${ICMP_IN} ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -p icmp --icmp-type 8 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -m limit --limit 30/sec  -j ACCEPT
else
	${IPT} -A INPUT -i ${PUB_IF} -m geoip --src-cc ${ICMP_IN} -p icmp --icmp-type 8 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -m limit --limit 30/sec  -j ACCEPT
fi
${IPT} -A OUTPUT -o ${PUB_IF} -p icmp --icmp-type 0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# allow incoming SSH
if [[ -z ${SSH_IN} ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
else
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${SSH_IN} --sport 1024:65535 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
fi
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 22 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow incoming HTTP(S) port 80,443
if [[ ${webhttp} == "1" ]]; then
	if [[ -z ${HTTP_IN} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 80 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${HTTP_IN} --sport 1024:65535 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${HTTP_IN} --sport 80 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
fi
if [[ ${webhttps} == "1" ]]; then
	if [[ -z ${HTTPS_IN} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 443 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${HTTP_IN} --sport 1024:65535 --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${HTTP_IN} --sport 443 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
fi

# allow incoming ISPCONFIG HTTP(S) port 8080,8081
if [[ ${ispconfig} == "1" ]]; then
	if [[ -z ${ISPCONF_IN} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 8081 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${ISPCONF_IN} --sport 1024:65535 --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${ISPCONF_IN} --sport 1024:65535 --dport 8081 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 8080 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 8081 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

# allow incoming FTP
if [[ ${ftp} == "1" ]]; then
	if [[ -z ${FTP_IN} ]]; then
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 20 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	else
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${FTP_IN} --sport 1024:65535 --dport 20 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${FTP_IN} --sport 1024:65535 --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	fi
	if [[ ! -z ${FTP_PASV} ]]; then
		if [[ -z ${FTP_IN} ]]; then
			${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport ${FTP_PASV} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		else
			${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp -m geoip --src-cc ${FTP_IN} --sport 1024:65535 --dport ${FTP_PASV} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
		fi
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport ${FTP_PASV} --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	fi
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 20 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 21 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

# allow incoming DNS
if [[ ${dns} == "1" ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -p udp -m udp --sport 1024:65535 --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

# allow outgoing DNS and LOG
${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] DNS"
${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p udp -m udp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] DNS"
${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 53 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing NTP and LOG
${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] NTP "
${IPT} -A OUTPUT -o ${PUB_IF} -p udp -m udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p udp -m udp --sport 123 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing SSH and LOG
if [[ -z ${SSH_IN} ]] && [[ -z ${SSH_OUT_IP} ]]; then
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SSH "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
elif [[ ! -z ${SSH_IN} ]] && [[ -z ${SSH_OUT_IP} ]]; then
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${SSH_IN} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SSH "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${SSH_IN} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
elif [[ -z ${SSH_IN} ]] && [[ ! -z ${SSH_OUT_IP} ]]; then
	for sshoip in ${SSH_OUT_IP}
		do
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -d ${sshoip} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SSH "
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -d ${sshoip} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	done
elif [[ ! -z ${SSH_IN} ]] && [[ ! -z ${SSH_OUT_IP} ]]; then
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${SSH_IN} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SSH "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${SSH_IN} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	for sshoip in ${SSH_OUT_IP}
		do
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -d ${sshoip} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SSH "
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -d ${sshoip} --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	done
fi
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow outgoing HTTP,SMTP and LOG for all ispconfig user except untrusted
http()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] HTTP OUT UID "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}
https()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] HTTPS OUT UID "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}
httpack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${HTTP_OUT} --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] HTTP OUT UID "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${HTTP_OUT} --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}
httpsack()
{
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${HTTPS_OUT} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] HTTPS OUT UID "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m geoip --dst-cc ${HTTPS_OUT} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
}

if [[ ${ispconfig} == "1" ]] && [[ ! -z ${UNTRUST_ISPUSER} ]]; then
	for usr in ${UNTRUST_ISPUSER}
	do
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m owner --uid-owner ${usr} --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] BLOCKED HTTP OUT UID "
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m owner --uid-owner ${usr} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] BLOCKED HTTPS OUT UID "
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m owner --uid-owner ${usr} --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j DROP
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp -m owner --uid-owner ${usr} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j DROP
	done
fi

if [[ ! -z ${HTTP_OUT} ]] && [[ -z ${HTTPS_OUT} ]]; then
	httpack; https;
elif [[ -z ${HTTP_OUT} ]] && [[ ! -z ${HTTPS_OUT} ]]; then
	http; httpsack;
elif [[ ! -z ${HTTP_OUT} ]] && [[ ! -z ${HTTPS_OUT} ]]; then
	httpack; httpsack;
elif [[ -z ${HTTP_OUT} ]] && [[ -z ${HTTPS_OUT} ]]; then
	http; https;
fi

# HTTP, HTTPS ACK
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 80 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 443 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# SMTP IN/OUT
if [[ ${smtp} == "1" ]]; then
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 465 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 587 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 25 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 465 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 587 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT
fi

if [[ -z ${SMTP_OUT} ]]; then
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SMTP OUT UID "
	${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
else
	for smtpout in ${SMTP_OUT}
	do
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65535 -d ${smtpout} --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] SMTP OUT UID "
		${IPT} -A OUTPUT -o ${PUB_IF} -p tcp -m tcp --sport 1024:65525 -d ${smtpout} --dport 25 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
	done
fi
${IPT} -A INPUT -i ${PUB_IF} -p tcp -m tcp --sport 25 --dport 1024:65535 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# allow trusted users unlimited outbound
for usr in ${TRUSTED_USERS}
do
	# ${IPT} -I OUTPUT -o ${PUB_IF} -j LOG --log-uid --log-prefix "[FW] ${usr} " ### disabled because too much logging spoof
	${IPT} -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ${usr} -j ACCEPT
done

if [[ ${ispconfig} == "1" ]]; then
	${IPT} -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ispconfig -j ACCEPT
	${IPT} -I OUTPUT -o ${PUB_IF} -m owner --uid-owner ispapps -j ACCEPT
fi

#######################
# drop and log everything else
${IPT} -A INPUT -m limit --limit 5/m --limit-burst 7 -j LOG --log-uid --log-prefix "[FW] DEFAULT DROP UID "
${IPT} -A INPUT -j DROP

# Restart Fail2Ban if needed
if [[ ${fbrestart} == "1" ]]; then
    /etc/init.d/fail2ban restart > /dev/null 2>&1
fi

echo "Done."
}

stopproc()
{
echo -n "Stopping $(hostname) Firewall..."
${IPT} -F
${IPT} -X
${IPT} -t nat -F
${IPT} -t nat -X
${IPT} -t mangle -F
${IPT} -t mangle -X
${IPT} -P INPUT ACCEPT
${IPT} -P OUTPUT ACCEPT
${IPT} -P FORWARD ACCEPT
echo "Done."
}

if [[ ${start} == "1" ]] && [[ ${stop} == "0" ]]; then
	startproc;
elif [[ ${start} == "0" ]] && [[ ${stop} == "1" ]]; then
	stopproc;
fi

exit 0
